# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VersionsVersions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, major: int=None, minor: int=None, patch: int=None):  # noqa: E501
        """VersionsVersions - a model defined in Swagger

        :param id: The id of this VersionsVersions.  # noqa: E501
        :type id: str
        :param major: The major of this VersionsVersions.  # noqa: E501
        :type major: int
        :param minor: The minor of this VersionsVersions.  # noqa: E501
        :type minor: int
        :param patch: The patch of this VersionsVersions.  # noqa: E501
        :type patch: int
        """
        self.swagger_types = {
            'id': str,
            'major': int,
            'minor': int,
            'patch': int
        }

        self.attribute_map = {
            'id': 'id',
            'major': 'major',
            'minor': 'minor',
            'patch': 'patch'
        }

        self._id = id
        self._major = major
        self._minor = minor
        self._patch = patch

    @classmethod
    def from_dict(cls, dikt) -> 'VersionsVersions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Versions_versions of this VersionsVersions.  # noqa: E501
        :rtype: VersionsVersions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this VersionsVersions.


        :return: The id of this VersionsVersions.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VersionsVersions.


        :param id: The id of this VersionsVersions.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def major(self) -> int:
        """Gets the major of this VersionsVersions.


        :return: The major of this VersionsVersions.
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major: int):
        """Sets the major of this VersionsVersions.


        :param major: The major of this VersionsVersions.
        :type major: int
        """
        if major is None:
            raise ValueError("Invalid value for `major`, must not be `None`")  # noqa: E501

        self._major = major

    @property
    def minor(self) -> int:
        """Gets the minor of this VersionsVersions.


        :return: The minor of this VersionsVersions.
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor: int):
        """Sets the minor of this VersionsVersions.


        :param minor: The minor of this VersionsVersions.
        :type minor: int
        """
        if minor is None:
            raise ValueError("Invalid value for `minor`, must not be `None`")  # noqa: E501

        self._minor = minor

    @property
    def patch(self) -> int:
        """Gets the patch of this VersionsVersions.


        :return: The patch of this VersionsVersions.
        :rtype: int
        """
        return self._patch

    @patch.setter
    def patch(self, patch: int):
        """Sets the patch of this VersionsVersions.


        :param patch: The patch of this VersionsVersions.
        :type patch: int
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")  # noqa: E501

        self._patch = patch
