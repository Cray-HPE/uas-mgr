#
# Copyright 2020, Cray Inc.  All Rights Reserved.
#
# coding: utf-8
"""Generated models from the swagger schema

"""

from __future__ import absolute_import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Volume(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    # pylint: disable=too-many-arguments,redefined-builtin
    def __init__(
            self,
            volumename: str = None,
            type: str = None,
            mount_path: str = None,
            host_path: str = None,
            secret_name: str = None,
            config_map: str = None
    ):  # noqa: E501
        """Volume - a model defined in Swagger

        :param volumename: The volumename of this Volume.  # noqa: E501
        :type volumename: str
        :param type: The type of this Volume.  # noqa: E501
        :type type: str
        :param mount_path: The mount_path of this Volume.  # noqa: E501
        :type mount_path: str
        :param host_path: The host_path of this Volume.  # noqa: E501
        :type host_path: str
        :param secret_name: The secret_name of this Volume.  # noqa: E501
        :type secret_name: str
        :param config_map: The config_map of this Volume.  # noqa: E501
        :type config_map: str
        """
        self.swagger_types = {
            'volumename': str,
            'type': str,
            'mount_path': str,
            'host_path': str,
            'secret_name': str,
            'config_map': str
        }

        self.attribute_map = {
            'volumename': 'volumename',
            'type': 'type',
            'mount_path': 'mount_path',
            'host_path': 'host_path',
            'secret_name': 'secret_name',
            'config_map': 'config_map'
        }
        self._volumename = volumename
        self._type = type
        self._mount_path = mount_path
        self._host_path = host_path
        self._secret_name = secret_name
        self._config_map = config_map

    @classmethod
    def from_dict(cls, dikt) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Volume of this Volume.  # noqa: E501
        :rtype: Volume
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volumename(self) -> str:
        """Gets the volumename of this Volume.


        :return: The volumename of this Volume.
        :rtype: str
        """
        return self._volumename

    @volumename.setter
    def volumename(self, volumename: str):
        """Sets the volumename of this Volume.


        :param volumename: The volumename of this Volume.
        :type volumename: str
        """

        self._volumename = volumename

    @property
    def type(self) -> str:
        """Gets the type of this Volume.


        :return: The type of this Volume.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Volume.


        :param type: The type of this Volume.
        :type type: str
        """

        self._type = type

    @property
    def mount_path(self) -> str:
        """Gets the mount_path of this Volume.


        :return: The mount_path of this Volume.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path: str):
        """Sets the mount_path of this Volume.


        :param mount_path: The mount_path of this Volume.
        :type mount_path: str
        """

        self._mount_path = mount_path

    @property
    def host_path(self) -> str:
        """Gets the host_path of this Volume.


        :return: The host_path of this Volume.
        :rtype: str
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path: str):
        """Sets the host_path of this Volume.


        :param host_path: The host_path of this Volume.
        :type host_path: str
        """

        self._host_path = host_path

    @property
    def secret_name(self) -> str:
        """Gets the secret_name of this Volume.


        :return: The secret_name of this Volume.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name: str):
        """Sets the secret_name of this Volume.


        :param secret_name: The secret_name of this Volume.
        :type secret_name: str
        """

        self._secret_name = secret_name

    @property
    def config_map(self) -> str:
        """Gets the config_map of this Volume.


        :return: The config_map of this Volume.
        :rtype: str
        """
        return self._config_map

    @config_map.setter
    def config_map(self, config_map: str):
        """Sets the config_map of this Volume.


        :param config_map: The config_map of this Volume.
        :type config_map: str
        """

        self._config_map = config_map
