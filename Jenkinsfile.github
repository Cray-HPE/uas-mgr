@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cray-uas-mgr"
        RPM_NAME = "cray-uas-mgr-crayctldeploy"
        DESCRIPTION = "Cray User Access Service Manager"
        IS_STABLE = getBuildIsStable()
        VERSION = getDockerBuildVersion(isStable: env.IS_STABLE)
        DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION)
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
        CHART_VERSION = getChartVersion(version: env.VERSION)

    }

    stages {
        stage("Build") {
            parallel {
                stage('Image') {
                    steps {
                        sh "make image"
                    }
                }

                stage('Chart') {
                    steps {
                        sh "make chart"
                    }
                }

                stage('RPM') {
                    agent {
                        docker {
                            image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-sle15sp2_build_environment:latest"
                            reuseNode true
                             // Run as root
                            args "-u root"
                        }
                    }
                    steps {
                        sh "make rpm"
                    }
                }
            }
        }


        stage('Publish') {
            steps {
                script {
                    publishCsmDockerImage(image: env.NAME, tag: env.VERSION, isStable: env.IS_STABLE)
                    publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", arch: "x86_64", isStable: env.IS_STABLE)
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
                }
            }
        }
    }

    post {
        always {
            // Own files so jenkins can clean them up later
            postChownFiles()
        }
    }
}
