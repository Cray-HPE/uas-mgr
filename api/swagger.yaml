#
# Copyright 2019, Cray Inc.  All Rights Reserved.
#
openapi: "3.0.2"
info:
  title: "User Access Service"
  description: |
    The User Access Service (UAS) creates and deletes
    User Access Instances (UAIs). The UAI is a containerized
    SSHd environment, built using a specific OS as a base, and
    contains libraries, commands, and utilities necessary for application
    development.

    A user may ssh to a UAI in order to build, run, and debug applications.
    The available images and volumes are configured by a system administrator.
    The UAI runs on a non-compute node.


    ## Resources


    ### /images

    An image, identified by its *imagename*, is a UAI container image.
    There is potential for different containerized images to be available,
    each built using different components/versions.

    ### /mgr-info

    Return the version of this service.

    ### /uas

    Create, delete, or list the User Access Instance(s).
    When a user requests a new UAI, the UAS service returns status and
    connection information to the newly created UAI.

    ### /uais

    List or delete User Access Instance(s).

    ### /volumes

    Volumes are mounted within the UAI for user access for the
    duration of the UAI.

    ### /admin/config/images

    This is where an administrator can create or delete UAI entries in
    the list of available container image names.

    ### /admin/config/volumes

    This is where an administrator can create, modify, or delete
    entries in the list of available volumes.

    ## Workflows


    ### Single User Workflow

    As an individual user, create a UAI for your own use and delete it when
    no longer needed.

    #### GET /uas

    Get the list of available, user-specific UAIs.

    #### POST /uas

    Request to create a new User Access Instance (UAI).
    When an authenticated user requests a new UAI, the User Access
    Service returns status and connection information for the newly
    created UAI, which will be available via ssh.
    Most properties of UAI are static for the life of a UAI.
    UAIs are not shared - they do not have multiple owners.

    #### ssh to the new UAI

    Build, run, debug applications.

    #### DELETE /uas

    Cleanup your own UAI.  This operation is restricted to owner of the UAI.

    ### Admin Workflow

    As an administrator, establish the system-wide configuration, in
    terms of images and volumes, used for UAI creation. Subsequently
    created UAIs will contain the specified /image and all configured
    /volumes.  Note that the configuration applies to UAIs
    subsequently created.  When the system-wide configuration changes,
    those changes do not affect pre-existing UAIs.

    These operations are available under the /admin/config prefix.
    Currently supported paths uder /admin/config are /admin/config/images and
    /admin/config/volumes.

    #### GET /uas

    Get a list of all available UAIs on the system.

    #### GET /images or GET /admin/config/images

    Get a list of container images available for use by a UAI.

    #### GET /images/{imagename} or GET /admin/config/images/{imagename}

    Get information about a specific UAI container image - not implemented.

    #### GET /volumes or GET /admin/config/volumes

    Get a list of volumes available for use by UAIs.

    #### GET /volumes/{volumename} or GET /admin/config/volumes/{volumname}

    Get information about a specific volume available for use by UAIs.

    #### POST /admin/config/volumes
    
    Add a volume to the list of volumes that will be mounted in new UAIs.

    #### POST /admin/config/images

    Add image name to list of valid images.

    #### POST /uas

    Request to create new UAI, having the specified image.  All
    volumes listed in the configuration are assigned to a new UAI, but
    only the specified ports are assigned in addition to the SSH port,
    and then only if they are in the set 80, 443 and 8888.

    #### PATCH /admin/config/images/{imagename}

    Update the entry for the specified image in the list of UAI
    container images.

    #### PATCH /admin/config/volumes/{volumename}

    Update the entry for the specified volume in the list of volumes
    mounted in UAI containers.

    #### DELETE /admin/config/images/{imagename}

    Delete the specified image name from the list of available UAI
    container images.

    #### DELETE /admin/config/volumes/{volumename}

  version: "1.3.2"

servers:
  - url: "/apis/uas-mgr/v1"

paths:

  /:

    get:
      summary: "Return supported UAS API versions"
      description: "Return supported UAS API versions."
      operationId: "root_get"
      tags:
      - "versions"
      - "cli_ignore"
      responses:
        200:
          description: "Version response"
 # Need response schema with example?
      x-openapi-router-controller: "swagger_server.controllers.versions_controller"

  /uas:

    get:
      summary: "List UAIs"
      description: "List all available UAIs for username."
# Mention how/when username is authenticated
      operationId: "get_uais_for_user"
      tags:
      - "uas"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                 $ref: "#/components/schemas/UAI"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Create a UAI"
      description: "Create a new UAI using the specified image.  It will be accessable via ssh, and projected onto ports, if ports are specified."
      operationId: "create_uai"
      tags:
      - "uas"
      parameters:
      - name: "imagename"
        in: "query"
        description: "Image to use for UAI"
        required: false
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      - name: "ports"
        in: "query"
        description: "Additional ports to project from the UAI besides ssh. Restricted to ports 80, 443 and 8888."
        required: false
        schema:
          type: "string"
        example: "80,443"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                publickey:
                  description: "File containing public ssh key for the user"
                  type: "string"
                  format: "binary"
      responses:
        201:
          description: "UAI created"
          content:
            application/json:
              schema:
                type: "object"
# $ref: More details for response body
        404:
          description: "Unable to create UAI"
          content:
            application/json:
              schema:
                type: "object"
# $ref: What is in schema if failure to create?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Delete a UAI"
      description: |
        Delete specified UAI(s). Takes a list of UAI names and deletes the associated UAI(s).
      operationId: "delete_uai_by_name"
      tags:
      - "uas"
      parameters:
      - name: "uai_list"
        description: "comma separated list of UAI names"
        in: "query"
        required: true
        style: form
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
        example: ["uai-asdfgh098","uai-qwerty123"]
      responses:
        200:
          description: "UAIs deleted"
        404:
          description: "Failed to delete UAI with {uai_id}"
 # Did whole list fail or were there specific uais that failed?  Schema.
 # ref: ?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /images:

    get:
      summary: "List UAS images"
      description: "List all available UAS images."
      operationId: "get_uas_images"
      tags:
      - "images"
      responses:
        200:
          description: "UAS Image List"
          content:
            application/json:
              schema:
 # ref: ?
                type: "object"
        404:
          description: "UAS Images not found"
          content:
            application/json:
             schema:
                type: "object"
 # ref: ?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Deprecated and never implemented  - see /admin/config/images"
      description: "Deprecated and never implemented"
      operationId: "create_uas_image_deprecated"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "query"
        description: "Image to create"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        201:
          description: "Image added"
          content:
            application/json:
              schema:
                type: "object"
        304:
          description: "Image not added"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /images/{imagename}:

    delete:
      summary: "Deprecated and never implemented - see /admin/config/images/{imagename}"
      description: "Deprecated and never implemented"
      operationId: "delete_uas_image_deprecated"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "Image removed"
        404:
          description: "Failed to delete image {image_id}"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Deprecated and never implemented  - see /admin/config/images/{imagename}"
      description: "Deprecated and never implemented"
      operationId: "update_uas_image_deprecated"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "path"
        description: "Image to update"
        required: true
        schema:
          type: "string"
        example: "docker.local/cray/cray-uas-sles15:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        201:
          description: "Image updated"
          content:
            application/json:
              schema:
                type: "object"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "Get image info - not implemented"
      description: "Not yet implemented."
      operationId: "get_uas_image"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "UAS Image"
          content:
            application/json:
              schema:
                type: "object"
        404:
          description: "UAS Image {imagename} not found"
          content:
            application/json:
             schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /volumes:

    get:
      summary: "Deprecated and never implemented"
      description: "Deprecated and never implemented."
      operationId: "get_uas_volumes_deprecated"
      tags:
      - "volumes"
      - "cli_hidden"
      responses:
        200:
          description: "UAS Volume list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                 $ref: "#/components/schemas/Volume"
        404:
          description: "UAS Volumes not found"
          content:
            application/json:
             schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Deprecated and never implemented - see /admin/config/volumes"
      description: "Deprecated and never implemented"
      operationId: "create_uas_volume_deprecated"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "query"
        description: "Volume to create"
        required: true
        schema:
          type: "string"
        example: "mymount"
      - name: "type"
        in: "query"
        description: "Valid k8s hostPath subtypes: DirectoryOrCreate, Directory, FileOrCreate,
          File, Socket, CharDevice, BlockDevice"
        required: false
        schema:
          type: "string"
          default: "DirectoryOrCreate"
        example: "DirectoryOrCreate"
      - name: "mount_path"
        in: "query"
        description: "Mount path inside the UAI"
# required?
        required: false
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "host_path"
        in: "query"
        description: "Mount path on the host"
# required?
        required: false
        schema:
          type: "string"
        example: "/opt/host/path"
      responses:
        201:
          description: "Volume added"
          content:
            application/json:
              schema:
                type: "object"
        304:
          description: "Volume not added"
          content:
            application/json:
              schema:
                type: "object"
        400:
          description: "Invalid type for host, volume not added"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /volumes/{volumename}:

    delete:
      summary: "Deprecated and never implemented - see /admin/config/volumes/{volumename}"
      description: "Deprecated and never implemented"
      operationId: "delete_uas_volume_deprecated"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "Volume removed from list"
        404:
          description: "Failed to delete volume {volume_id}"
# ref: ? Any cause available? Incorrect volume_id?  Tried and failed?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Deprecated and never implemented - see /admin/config/volumes/{volumename}"
      description: "Deprecated and never implemented"
      operationId: "update_uas_volume_deprecated"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        description: "Volume to update"
        required: true
        schema:
          type: "string"
        example: "mymount"
      - name: "type"
        in: "query"
        description: "Valid types: DirectoryOrCreate, Directory, FileOrCreate,
          File, Socket, CharDevice, BlockDevice"
        required: false
        schema:
          type: "string"
          default: "DirectoryOrCreate"
        example: "DirectoryOrCreate"
      - name: "mount_path"
        in: "query"
        description: "Mount path inside the UAI"
        required: false
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "host_path"
        in: "query"
        description: "Mount path on the host"
        required: false
        schema:
          type: "string"
        example: "/opt/host/path"
      responses:
        201:
          description: "Volume updated"
          content:
            application/json:
              schema:
                type: "object"
 # ref:
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                type: "object"
        400:
          description: "Invalid type for host, volume not updated"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "Deprecated and never implemented"
      description: "Deprecated and never implemented."
      operationId: "get_uas_volume_deprecated"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "UAS Volume"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        404:
          description: "UAS Volume {volumename} not found"
          content:
            application/json:
             schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /mgr-info:

    get:
      summary: "List UAS info"
      description: "Return User Access Service information."
      operationId: "get_uas_mgr_info"
      tags:
      - "mgr-info"
      responses:
        200:
          description: "UAS-MGR Info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UAS_mgr_info"
        404:
          description: "UAS-MGR Info not found"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /uais:

    get:
      summary: "List UAIs"
      description: "List all UAIs on the system."
      operationId: "get_all_uais"
      tags:
      - "uais"
      parameters:
      - name: "username"
        in: "query"
        description: "List all UAIs matching this username"
        required: false
        schema:
          type: "string"
        example: "uastest"
      - name: "host"
        in: "query"
        description: "List all UAIs running on this host"
        required: false
        schema:
          type: "string"
        example: "ncn-w001"
      responses:
        200:
          description: "UAI List"
          content:
            application/json:
              schema:
                type: "object"
# $ref: array of UAIs?
        404:
          description: "No UAIs found"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Delete UAIs"
      description: "Delete all UAIs on the system."
      operationId: "delete_all_uais"
      tags:
      - "uais"
      - "cli_danger$This will delete all running UAIs, Are you sure?"
      parameters:
      - name: "username"
        in: "query"
        description: "delete all UAIs matching this username"
        required: false
        schema:
          type: "string"
        example: "uastest"
      responses:
        200:
          description: "All UAIs Deleted"
        404:
          description: "No UAIs found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/images:

    get:
      summary: "List UAS images"
      description: "List all available UAS images."
      operationId: "get_uas_images_admin"
      tags:
      - "images"
      responses:
        200:
          description: "UAS Image List"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        404:
          description: "UAS Images not found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Add an image"
      description: |
        Add valid image name to configuration. Does not create or
        upload container image.  Optionally, set default.
      operationId: "create_uas_image_admin"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "query"
        description: "Image to create"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        201:
          description: "Image added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        304:
          description: "Image not added"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/images/{imagename}:

    delete:
      summary: "Remove the imagename from set of valid images"
      description: "Delete the named image from the set of valid UAI container images."
      operationId: "delete_uas_image_admin"
      tags:
      - "images"
      parameters:
      - name: "imagename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "Image removed"
        404:
          description: "Failed to delete image {image_id}"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update an image"
      description: "Update an image, specifically this can set or unset the 'default' flag."
      operationId: "update_uas_image_admin"
      tags:
      - "images"
      parameters:
      - name: "imagename"
        in: "path"
        description: "Image to update"
        required: true
        schema:
          type: "string"
        example: "docker.local/cray/cray-uas-sles15:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        201:
          description: "Image updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "Get image info"
      description: "Get a description of the named image"
      operationId: "get_uas_image_admin"
      tags:
      - "images"
      parameters:
      - name: "imagename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "UAS Image"
          content:
            application/json:
             schema:
                $ref: "#/components/schemas/Image"
        404:
          description: "UAS Image {imagename} not found"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/volumes:

    get:
      summary: "List volumes"
      description: |
        The volume list in the configuration is used during UAI creation.
        This list does not necessarily relate to UAIs previously created.
        This call does not affect the k8s volume itself.

      operationId: "get_uas_volumes_admin"
      tags:
      - "volumes"
      responses:
        200:
          description: "UAS Volume list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AdminVolume"
        404:
          description: "UAS Volumes not found"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Add a volume"
      description: |
        Add a volume to the volume list in the configuration.  The
        volume list is used during UAI creation, so this request only
        applies to UAIs subsequently created.  Modifying the volume
        list does not affect existing UAIs.

      operationId: "create_uas_volume_admin"
      tags:
      - "volumes"
      parameters:
      - name: "volumename"
        in: "query"
        description: "Volume to create"
        required: true
        schema:
          type: "string"
        example: "mymount"
      - name: "mount_path"
        in: "query"
        description: "Mount path inside the UAI"
        required: true
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "volume_description"
        in: "query"
        description: |
          JSON description of a Kubernetes volume to be mounted in UAI
          containers.  This is the JSON equivalent of whatever YAML
          you would normally apply to Kubernetes to attach the kind of
          volume you want to a pod.  There are many kinds of volumes,
          the examples given here illustrate some options:
          
          { "hostPath": { "path": "/data", "type": "DirectoryOrCreate" } }

          or

          { "secret": { "secretName": "my-secret" } }

          or

          { "configMap": { "name": "my-configmap", "items": { "key": "flaps", "path": "flaps" } } }
          
        required: true
        schema:
          type: "string"
        example: "{ \"configMap\": { \"name\": \"my-configmap\" } }"

      responses:
        201:
          description: "Volume added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminVolume"
        304:
          description: "Volume not added"
          content:
            application/json:
              schema:
                type: "string"
        400:
          description: "Invalid type for host, volume not added"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /admin/config/volumes/{volumename}:

    delete:
      summary: "Remove volume from the volume list"
      description: |
        Does not affect existing UAIs.
        Remove the volume from the list of valid volumes.
        The actual volume itself is not affected in any way.

      operationId: "delete_uas_volume_admin"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "Volume removed from list"
        404:
          description: "Failed to delete volume {volume_id}"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update a volume"
      description: |
        Update a volume to be mounted in UAS images. This has no
        effect on running UAIs and does not change the volume itself
        in any way, but it can modify the relationship between
        future UAI containers and the volume.
      operationId: "update_uas_volume_admin"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        description: "Volume to update"
        required: true
        schema:
          type: "string"
        example: "mymount"
      - name: "mount_path"
        in: "query"
        description: "Mount path inside the UAI"
        required: false
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "volume_description"
        in: "query"
        description: |
          JSON description of a Kubernetes volume to be mounted in UAI
          containers.  This is the JSON equivalent of whatever YAML
          you would normally apply to Kubernetes to attach the kind of
          volume you want to a pod.  There are many kinds of volumes,
          the examples given here illustrate some options:
          
          { "hostPath": { "path": "/data", "type": "DirectoryOrCreate" } }

          or

          { "secret": { "secretName": "my-secret" } }

          or

          { "configMap": { "name": "my-configmap", "items": { "key": "flaps", "path": "flaps" } } }
          
        required: false
        schema:
          type: "string"
        example: "{ \"configMap\": { \"name\": \"my-configmap\" } }"
      responses:
        201:
          description: "Volume updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminVolume"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminVolume"
        400:
          description: "Invalid type for host, volume not updated"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "Get volume info for volumename"
      description: "Get volume info for volumename"
      operationId: "get_uas_volume_admin"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "UAS Volume"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminVolume"
        404:
          description: "UAS Volume {volumename} not found"
          content:
            application/json:
              schema:
                type: "string"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

components:
  schemas:
    UAI:
      type: "object"
      properties:
        uai_name:
          type: "string"
        username:
          type: "string"
        publickey:
          type: "string"
        uai_img:
          type: "string"
        uai_status:
          type: "string"
        uai_msg:
          type: "string"
        uai_connect_string:
          type: "string"
        uai_portmap:
          type: "object"
          additionalProperties:
            type: "integer"
        uai_host:
          type: "string"
        uai_age:
          type: "string"
      example:
        uai_id: "user-uai-uai_image"
        username: "user_name"
        publickey: "/Users/user/.ssh/id_rsa.pub"
        uai_img: "uai_img"
        uai_status: "Running"
        uai_reason: "Deploying"
        uai_host: "ncn-w001"
        uai_age: "13d8h"
    Volume:
      type: "object"
      properties:
        volumename:
          type: "string"
        type:
          type: "string"
        mount_path:
          type: "string"
        host_path:
          type: "string"
        secret_name:
          type: "string"
        config_map:
          type: "string"
      example:
        volumename: "example_mount"
        type: "DirectoryOrCreate"
        mount_path: "/opt/test/foo"
        host_path: "/opt/host/foo"
    AdminVolume:
      type: "object"
      properties:
        volumename:
          type: "string"
        mount_path:
          type: "string"
        volume_description:
          type: "string"
      example:
        volumename: "example_mount"
        mount_path: "/opt/test/foo"
        volume_description: |
          {"hostPath":{"path": "/opt/host/foo", "type": "DirectoryOrCreate"}}
    Image:
      type: "object"
      properties:
        imagename:
          type: "string"
        default:
          type: "boolean"
      example:
        imagename: "node.local/uas-sles15:latest"
        default: false
    UAS_mgr_info:
      type: "object"
      properties:
        service_name:
          type: "string"
        version:
          type: "string"
      example:
        service_name: "cray-uas-mgr"
        version: "version"
