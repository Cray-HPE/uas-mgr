#
# Copyright 2019, Cray Inc.  All Rights Reserved.
#
openapi: "3.0.2"
info:
  title: "User Access Service"
  description: |
    The User Access Service (UAS) creates and deletes User Access Instances (UAIs).
    A user may ssh or login to a UAI running on an NCN,
    to build, run, and debug applications.


      ## Single user workflow

      As an individual user, create a UAI for your own use and delete it when
      no longer needed.

      * GET /uas - Get the list of available, user-specific UAIs.

      * POST /uas - Request to create a new User Access Instance (UAI).
      When an authenticated user requests a new UAI, the User Access
      Service returns status and connection information for the newly
      created UAI, which will be available via ssh.
      Most properties of UAI are static for the life of a UAI.
      UAIs are not shared - they do not have multiple owners.

      * ssh to the new UAI.

      * DELETE /uas - Cleanup your own UAI.  This operation is restricted to owner of the UAI.


      ## Admin workflow

    As an administrator,
    establish the system-wide configuration,
    in terms of images, volumes, and ports, used for
    UAI creation. Subsequently created UAIs will contain the specified /image and
    all configured /volumes, and optionally specified /ports.
    Note that the configuration applies to UAIs subsequently created.
    When the system-wide configuration
    changes, those changes do not affect pre-existing UAIs.


    These system wide APIs which manage the /images, /volumes, and /ports resources
    are not yet implemented.



      * GET /uas - Get a list of all available UAIs on the system

      * GET /images - Get a list of images available for use by a UAI

      * GET /volumes - Get a list of volumes available for use by UAIs

      * GET /ports - Get a list of available ports

      * POST /volumes - Adds a volume to the list of volumes that will be mounted in new UAIs

      * POST /images - Add image name to list of valid images

      * POST /ports - Add port to list of valid ports

      * POST /uas - Request to create new UAI, having the specified image.  All volumes listed in the configuration are assigned to a new
      UAI, but only the specified ports from allowed ports are assigned.

      * DELETE /uas - Cleanup


  version: "0.13.11"

servers:
  - url: "/apis/uas-mgr/v1"

paths:

  /:

    get:
      summary: "Return supported UAS API versions"
      description: "Return supported UAS API versions."
      operationId: "root_get"
      tags:
      - "versions"
      - "cli_ignore"
      responses:
        200:
          description: "Version response"
 # Need response schema with example?
      x-openapi-router-controller: "swagger_server.controllers.versions_controller"

  /uas:

    get:
      summary: "List UAIs"
      description: "List all available UAIs for username."
# Mention how/when username is authenticated
      operationId: "get_uais_for_user"
      tags:
      - "uas"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                 $ref: "#/components/schemas/UAI"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Create a UAI"
      description: "Create a new UAI using the specified image.  It will be accessable via ssh, and projected onto ports, if ports are specified."
      operationId: "create_uai"
      tags:
      - "uas"
      parameters:
      - name: "imagename"
        in: "query"
        description: "Image to use for UAI"
        required: false
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      - name: "ports"
        in: "query"
        description: "Additional ports to project from the UAI besides ssh. Restricted to ports 80, 443 and 8888."
        required: false
        schema:
          type: "string"
        example: "80,443"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                publickey:
                  description: "File containing public ssh key for the user"
                  type: "string"
                  format: "binary"
      responses:
        201:
          description: "UAI created"
          content:
            application/json:
              schema:
                type: "object"
# $ref: More details for response body
        404:
          description: "Unable to create UAI"
          content:
            application/json:
              schema:
                type: "object"
# $ref: What is in schema if failure to create?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Delete a UAI"
      description: "Delete specified UAI(s). Takes a list of UAI names and deletes the associated UAI(s)."
      operationId: "delete_uai_by_name"
      tags:
      - "uas"
      parameters:
      - name: "uai_list"
        description: "comma separated list of UAI names"
        in: "query"
        required: true
        style: form
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
        example: ["uai-asdfgh098","uai-qwerty123"]
      responses:
        200:
          description: "UAIs deleted"
        404:
          description: "Failed to delete UAI with {uai_id}"
 # Did whole list fail or were there specific uais that failed?  Schema.
 # ref: ?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /images:

    get:
      summary: "List UAS images"
      description: "List all available UAS images."
      operationId: "get_uas_images"
      tags:
      - "images"
      responses:
        200:
          description: "UAS Image List"
          content:
            application/json:
              schema:
 # ref: ?
                type: "object"
        404:
          description: "UAS Images not found"
          content:
            application/json:
             schema:
                type: "object"
 # ref: ?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
 # Add/Create - Use consistent term
      summary: "Add an image"
      description: "Not yet implemented. Add valid image name to configuration. Does not create or upload container image.
        Optionally, set default."
      operationId: "create_uas_image"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "query"
        description: "Image to create"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        201:
          description: "Image added"
          content:
            application/json:
              schema:
                type: "object"
        304:
          description: "Image not added"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /images/{imagename}:

    delete:
      summary: "Remove the imagename from set of valid images"
      description: "Not yet implemented."
 # Is image recoverable after this operation?
      operationId: "delete_uas_image"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "Image removed"
        404:
          description: "Failed to delete image {image_id}"
 # Possible reasons for failure?
 # ref:  to schema that includes message?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update an image"
      description: "Not yet implemented."
      operationId: "update_uas_image"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "path"
        description: "Image to update"
        required: true
        schema:
          type: "string"
        example: "docker.local/cray/cray-uas-sles15:latest"
      - name: "default"
        in: "query"
        description: "default image (true/false)"
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        201:
          description: "Image updated"
          content:
            application/json:
              schema:
                type: "object"
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "Get image info"
      description: "Not yet implemented."
      operationId: "get_uas_image"
      tags:
      - "images"
      - "cli_hidden"
      parameters:
      - name: "imagename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "UAS Image"
          content:
            application/json:
              schema:
                type: "object"
        404:
          description: "UAS Image {imagename} not found"
          content:
            application/json:
             schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /volumes:

    get:
      summary: "List volumes"
      description: |

        Not yet implemented.


        The volume list in the configuration is used during UAI creation.
        This list does not necessarily relate to UAIs previously created.
        This call does not affect the k8s volume itself.

      operationId: "get_uas_volumes"
      tags:
      - "volumes"
      - "cli_hidden"
      responses:
        200:
          description: "UAS Volume list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                 $ref: "#/components/schemas/Volume"
        404:
          description: "UAS Volumes not found"
          content:
            application/json:
             schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    post:
      summary: "Add a volume"
      description: |
        Not yet implemented.

        Add a volume to the volume list
        in the configuration.
        The volume list is used during UAI creation,
        so this request only applies to UAIs subsequently created.
        Modifying the volume list does not affect existing UAIs.

        Not all parameters apply to all the volume types.
      operationId: "create_uas_volume"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "query"
        description: "Volume to create"
        required: true
        schema:
          type: "string"
        example: "mymount"
      - name: "type"
        in: "query"
        description: "Valid k8s hostPath subtypes: DirectoryOrCreate, Directory, FileOrCreate,
          File, Socket, CharDevice, BlockDevice"
        required: false
        schema:
          type: "string"
          default: "DirectoryOrCreate"
        example: "DirectoryOrCreate"
      - name: "mount_path"
        in: "query"
        description: "Mount path inside the UAI"
# required?
        required: false
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "host_path"
        in: "query"
        description: "Mount path on the host"
# required?
        required: false
        schema:
          type: "string"
        example: "/opt/host/path"
      responses:
        201:
          description: "Volume added"
          content:
            application/json:
              schema:
                type: "object"
        304:
          description: "Volume not added"
          content:
            application/json:
              schema:
                type: "object"
        400:
          description: "Invalid type for host, volume not added"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /volumes/{volumename}:

    delete:
      summary: "Remove volume from the volume list"
      description: |
        Not yet implemented.


        Does not affect existing UAIs.
        Remove the volume from the list of valid volumes.
        The actual volume itself is not affected in any way.

      operationId: "delete_uas_volume"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "Volume removed from list"
        404:
          description: "Failed to delete volume {volume_id}"
# ref: ? Any cause available? Incorrect volume_id?  Tried and failed?
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    patch:
      summary: "Update a volume"
      description: "Not yet implemented."
      operationId: "update_uas_volume"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        description: "Volume to update"
        required: true
        schema:
          type: "string"
        example: "mymount"
      - name: "type"
        in: "query"
        description: "Valid types: DirectoryOrCreate, Directory, FileOrCreate,
          File, Socket, CharDevice, BlockDevice"
        required: false
        schema:
          type: "string"
          default: "DirectoryOrCreate"
        example: "DirectoryOrCreate"
      - name: "mount_path"
        in: "query"
        description: "Mount path inside the UAI"
        required: false
        schema:
          type: "string"
        example: "/mnt/test"
      - name: "host_path"
        in: "query"
        description: "Mount path on the host"
        required: false
        schema:
          type: "string"
        example: "/opt/host/path"
      responses:
        201:
          description: "Volume updated"
          content:
            application/json:
              schema:
                type: "object"
 # ref:
        304:
          description: "No changes made"
          content:
            application/json:
              schema:
                type: "object"
        400:
          description: "Invalid type for host, volume not updated"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    get:
      summary: "Get volume info for volumename"
      description: "Get volume info for volumename"
      operationId: "get_uas_volume"
      tags:
      - "volumes"
      - "cli_hidden"
      parameters:
      - name: "volumename"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "node.local/uas-sles15:latest"
      responses:
        200:
          description: "UAS Volume"
          content:
            application/json:
              schema:
                type: "object"
# $ref: volume schema ?
        404:
          description: "UAS Volume {volumename} not found"
          content:
            application/json:
             schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /mgr-info:

    get:
      summary: "List UAS info"
      description: "Return User Access Service information."
      operationId: "get_uas_mgr_info"
      tags:
      - "mgr-info"
      responses:
        200:
          description: "UAS-MGR Info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UAS_mgr_info"
        404:
          description: "UAS-MGR Info not found"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

  /uais:

    get:
      summary: "List UAIs"
      description: "List all UAIs on the system."
      operationId: "get_all_uais"
      tags:
      - "uais"
      parameters:
      - name: "username"
        in: "query"
        description: "List all UAIs matching this username"
        required: false
        schema:
          type: "string"
        example: "uastest"
      - name: "host"
        in: "query"
        description: "List all UAIs running on this host"
        required: false
        schema:
          type: "string"
        example: "ncn-w001"
      responses:
        200:
          description: "UAI List"
          content:
            application/json:
              schema:
                type: "object"
# $ref: array of UAIs?
        404:
          description: "No UAIs found"
          content:
            application/json:
              schema:
                type: "object"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

    delete:
      summary: "Delete UAIs"
      description: "Delete all UAIs on the system."
      operationId: "delete_all_uais"
      tags:
      - "uais"
      - "cli_danger$This will delete all running UAIs, Are you sure?"
      parameters:
      - name: "username"
        in: "query"
        description: "delete all UAIs matching this username"
        required: false
        schema:
          type: "string"
        example: "uastest"
      responses:
        200:
          description: "All UAIs Deleted"
        404:
          description: "No UAIs found"
      x-openapi-router-controller: "swagger_server.controllers.uas_controller"

components:
  schemas:
    UAI:
      type: "object"
      properties:
        uai_name:
          type: "string"
        username:
          type: "string"
        publickey:
          type: "string"
        uai_img:
          type: "string"
        uai_status:
          type: "string"
        uai_msg:
          type: "string"
        uai_connect_string:
          type: "string"
        uai_portmap:
          type: "object"
          additionalProperties:
            type: "integer"
        uai_host:
          type: "string"
        uai_age:
          type: "string"
      example:
        uai_id: "user-uai-uai_image"
        username: "user_name"
        publickey: "/Users/user/.ssh/id_rsa.pub"
        uai_img: "uai_img"
        uai_status: "Running"
        uai_reason: "Deploying"
        uai_host: "ncn-w001"
        uai_age: "13d8h"
    Volume:
      type: "object"
      properties:
        volumename:
          type: "string"
        type:
          type: "string"
        mount_path:
          type: "string"
        host_path:
          type: "string"
        secret_name:
          type: "string"
        config_map:
          type: "string"
      example:
        name: "example_mount"
        type: "DirectoryOrCreate"
        mount_path: "/opt/test/foo"
        host_path: "/opt/host/foo"
    UAS_mgr_info:
      type: "object"
      properties:
        service_name:
          type: "string"
        version:
          type: "string"
      example:
        service_name: "cray-uas-mgr"
        version: "version"
