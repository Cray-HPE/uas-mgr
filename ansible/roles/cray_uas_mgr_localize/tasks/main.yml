# cray-uas-mgr localization ansible play
# MIT License
#
# (C) Copyright [2020] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
---
- name: Get current "{{ cray_uas_mgr_configmap }}"
  shell: kubectl get configmap -n services "{{ cray_uas_mgr_configmap }}" -o json | jq -r '.data."cray-uas-mgr.yaml"' > "{{ cray_uas_mgr_configmap_data }}"
  run_once: True

- name: Localizing UAS IP
  lineinfile:
    regexp: '^uas_ip:'
    line: 'uas_ip: {{ gwn_ipv4 }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
  when: gwn_ipv4 is defined
  run_once: True

- name: Setting default UAS image
  lineinfile:
    regexp: '^ {2}default_image'
    line: '  default_image: "{{ item }}"'
    dest: "{{ cray_uas_mgr_configmap_data }}"
  when: item is defined
  with_items:
    - "{{ uas_default_img }}"
  run_once: True

- name: Ensure default UAS image is in image list
  lineinfile:
    regexp: '^ {4}- "{{ item }}"'
    line: '    - "{{ item }}"'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: '^ {2}images:'
  with_items:
    - "{{ uas_default_img }}"
  when: item is defined
  run_once: True

- name: Removing unwanted UAS images
  lineinfile:
    line: '    - "{{ item }}"'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_imgs }}"
  when: item is defined
  run_once: True

- name: Adding UAS images
  lineinfile:
    regexp: '^ {4}- "{{ item }}"'
    line: '    - "{{ item }}"'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: '^ {2}images:'
  loop: "{{ add_uas_imgs }}"
  when: item is defined
  run_once: True

- name: Removing unwanted UAS volume mounts (remove mount name if host_path is defined)
  lineinfile:
    line: '    name: {{ item.name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_volume_mounts }}"
  when: item is defined and item.name is defined and item.host_path is defined
  run_once: True

- name: Removing unwanted UAS volume mounts (remove mount_path)
  lineinfile:
    line: '    mount_path: {{ item.mount_path }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_volume_mounts }}"
  when: item is defined and item.mount_path is defined
  run_once: True

- name: Removing unwanted UAS volume mounts (remove host_path)
  lineinfile:
    line: '  - host_path: {{ item.host_path }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_volume_mounts }}"
  when: item is defined and item.host_path is defined
  run_once: True

- name: Removing unwanted UAS volume mounts (remove name if host_path is undefined)
  lineinfile:
    line: '  - name: {{ item.name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_volume_mounts }}"
  when: item is defined and item.name and item.host_path is undefined
  run_once: True

- name: Removing unwanted UAS volume mounts (remove type)
  lineinfile:
    line: '    type: {{ item.type }} # type for {{ item.name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_volume_mounts }}"
  when: item is defined and item.type is defined
  run_once: True

- name: Removing unwanted UAS volume mounts (remove config_map)
  lineinfile:
    line: '    config_map: {{ item.config_map }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_volume_mounts }}"
  when: item is defined and item.config_map is defined
  run_once: True

- name: Removing unwanted UAS volume mounts (remove secret_name)
  lineinfile:
    line: '    secret_name: {{ item.secret_name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    state: absent
  loop: "{{ delete_uas_volume_mounts }}"
  when: item is defined and item.secret_name is defined
  run_once: True

- name: Adding UAS volume mounts (host_path defined)
  lineinfile:
    regexp: '^ {2}- host_path: {{ item.host_path }}$'
    line: '  - host_path: {{ item.host_path }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "^volume_mounts:"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.host_path is defined and (item.config_map is undefined or item.secret_name is undefined)
  run_once: True

- name: Adding UAS volume mounts (add mount_path if host_path defined)
  lineinfile:
    regexp: '^ {4}mount_path: {{ item.mount_path }}$'
    line: '    mount_path: {{ item.mount_path }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "  - host_path: {{ item.host_path }}$"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.mount_path is defined and item.host_path is defined
  run_once: True

- name: Adding UAS volume mounts (add mount name if host_path defined)
  lineinfile:
    regexp: '^ {4}name: {{ item.name }}$'
    line: '    name: {{ item.name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "    mount_path: {{ item.mount_path }}$"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.name is defined and item.host_path is defined
  run_once: True

- name: Adding UAS volume mounts (host_path undefined)
  lineinfile:
    regexp: '^ {2}- name: {{ item.name }}$'
    line: '  - name: {{ item.name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "^volume_mounts:"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.name is defined and item.host_path is undefined
  run_once: True

- name: Adding UAS volume mounts (add mount_path if host_path undefined)
  lineinfile:
    regexp: '^ {4}mount_path: {{ item.mount_path }}$'
    line: '    mount_path: {{ item.mount_path }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "  - name: {{ item.name }}$"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.mount_path is defined and item.host_path is undefined
  run_once: True

- name: Adding UAS volume mounts (add configmap)
  lineinfile:
    regexp: '^ {4}config_map: {{ item.config_map }}$'
    line: '    config_map: {{ item.config_map }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "    mount_path: {{ item.mount_path }}$"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.config_map is defined
  run_once: True

- name: Adding UAS volume mounts (add secret_name)
  lineinfile:
    regexp: '^ {4}secret_name: {{ item.secret_name }}$'
    line: '    secret_name: {{ item.secret_name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "    mount_path: {{ item.mount_path }}$"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.secret_name is defined
  run_once: True

- name: Adding UAS volume mounts (add type)
  lineinfile:
    regexp: '^ {4}type: {{ item.type }} # type for {{ item.name }}$'
    line: '    type: {{ item.type }} # type for {{ item.name }}'
    dest: "{{ cray_uas_mgr_configmap_data }}"
    insertafter: "    mount_path: {{ item.mount_path }}$"
  loop: "{{ add_uas_volume_mounts }}"
  when: item is defined and item.type is defined
  run_once: True

- name: Load updated configmap data
  command: "cat {{ cray_uas_mgr_configmap_data }}"
  register: cfgmap_data
  run_once: True

- name: Generate new "{{ cray_uas_mgr_configmap_file }}"
  template:
    src: cray-uas-mgr-cfgmap.yaml.j2
    dest: "{{ cray_uas_mgr_configmap_file }}"
  run_once: True

- name: Apply the cray-uas-mgr configmap yaml
  command: kubectl apply -n services -f "{{ cray_uas_mgr_configmap_file }}"
  register: kubectl_result
  changed_when: kubectl_result.stdout.find('created') != -1 or kubectl_result.stdout.find('configured') != -1
  run_once: True

- name: Restart cray-uas-mgr pods
  command: kubectl delete pod -n services -l app.kubernetes.io/name=cray-uas-mgr
  run_once: True
